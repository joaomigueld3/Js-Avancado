if em 1 linha
reduce
foreach
forin
filter
restruct
callback
split, slice(copy), 

add/remove{ push, pop, unshift(add beginning), 
pop, shift(remove beginning)
}
Array.isArray()

1. equality{
    "32"==32 true, because matches data type and compares
    "32"===32 false, only compares value
    comparing primitives and objects {
        primitives: compares value
        objects: compares reference
    }    
}

2. async JS {
    promise: waits for the until the data arrives
}

3. errorhandling{
    verify parameters type, null/undefined, try/catch
}

4. es6 syntax{
    {destructure}, spread (...), template strings
}

5. array methods{
    map, filter, reduce, some, sort, every
    combine it with arrow function
}

6. nested array destructuring{
    let users = ['joao', 'mane', 'maria',['jose','claudia']]
    users[3][1] = 'claudia'
    let [,,,[,claudia]] = ['joao', 'mane', 'maria',['jose','claudia']]
}
7. rest{
    const users = ['joao', 'maria', 'mane','jose'] 
    console.log(joao) //joao
    console.log(rest) //maria, mane...
}
8 . concat, join, fill{
let arr = [1,2,3,4]
let arr2 = [5,6,7]
let res = arr.concat(arr2) // 1,2,3,4,5,6,7
let resJoin = arr.join('->') // 1->2->3->4
const colors = ['joao', 'maria', 'mane']
colors.fill('jose');
console.log(colors); // ['jose', 'jose', 'jose']
}

9. strings(includes,indexOf,reverse,sort){
    const names = ['tom', 'alex', 'bob']
    names.sort(); // returns ["alex", "bob", "tom"]

    const numbers = [23, 5, 100, 56, 9, 13, 37, 10, 1]
    numbers.sort(); //[1, 10, 100, 13, 23, 37, 5, 56, 9]
    numbers.sort((a, b) => (a-b));//ascending
    numbers.sort((a, b) => (b-a));//descending

}